
#---- setup ----

if $(OS) = NT {
	C++FLAGS = /nologo /c /EHsc /W3 /WX /MD /I"../kit-libs-win/out/include" /I"../kit-libs-win/out/include/SDL2" /I"kit-libs-win/out/libpng"
		#disable a few warnings:
		/wd4146 #-1U is still unsigned
		/wd4297 #unforunately SDLmain is nothrow
	;
	LINKFLAGS = /nologo /SUBSYSTEM:CONSOLE
		/LIBPATH:"kit-libs-win/out/lib"
		/LIBPATH:"kit-libs-win/out/libpng"
		/LIBPATH:"kit-libs-win/out/zlib"
	;
	LINKLIBS = SDL2main.lib SDL2.lib OpenGL32.lib libpng.lib zlib.lib ;

	File dist\\SDL2.dll : ..\\kit-libs-win\\out\\dist\\SDL2.dll ;
} else {

	if $(OS) = MACOSX {
		KIT_LIBS = ../kit-libs-osx ;
		C++ = clang++ ;
		C++FLAGS =
			-std=c++14 -g -Wall 
			-I$(KIT_LIBS)/libpng/include                           #libpng
			-I$(KIT_LIBS)/glm/include                              #glm
			`PATH=$(KIT_LIBS)/SDL2/bin:$PATH sdl2-config --cflags` #SDL2
			;
		LINK = clang++ ;
		LINKFLAGS = -std=c++14 -g -Wall  ;

		LINKLIBS =
			-L$(KIT_LIBS)/libpng/lib -lpng                      #libpng
			-L$(KIT_LIBS)/zlib/lib -lz                          #zlib
			#-L$(KIT_LIBS)/openal -lopenal.1.18.2
			### working -lopenal
			### -lalut
			`PATH=$(KIT_LIBS)/SDL2/bin:$PATH sdl2-config --static-libs` -framework OpenGL #SDL2
			;
	} else if $(OS) = LINUX {
		KIT_LIBS = ../kit-libs-linux ;
		C++ = g++ ;
		C++FLAGS =
			-std=c++14 -g -Wall  
			-I$(KIT_LIBS)/libpng/include                           #libpng
			-I$(KIT_LIBS)/glm/include                              #glm
			`PATH=$(KIT_LIBS)/SDL2/bin:$PATH sdl2-config --cflags` #SDL2
			;

		LINK = g++ ;
		LINKFLAGS = -std=c++11 -g -Wall  ;

		LINKLIBS =
			-lopenal -lalut
			-L$(KIT_LIBS)/libpng/lib -lpng                      #libpng
			-L$(KIT_LIBS)/zlib/lib -lz                          #zlib
			`PATH=$(KIT_LIBS)/SDL2/bin:$PATH sdl2-config --static-libs` -lGL #SDL2
			;
	}

	if $(DEBUG) = true {
		C++FLAGS = $(C++FLAGS) -DDEBUG ;
		LINKFLAGS = $(LINKFLAGS) -DDEBUG ;
	}

}

#---- build ----

LOCAL =
	load_save_png
	Scene
	MeshBuffer
	Mode
	Load
	GLProgram
	MenuMode
	GameMode
	StagingMode
	Draw
	#Sounds
	;

NAMES =
	client_main
	load_save_png
	Scene
	MeshBuffer
	Mode
	Load
	GLProgram
	MenuMode
	person
	Collisions
	GameMode
	StagingMode
	Draw
	#Sounds
	Server
	;

if $(OS) = NT {
	NAMES += gl_shims ;
}

LOCATE_TARGET = ../objs ; #put objects in 'objs' directory
Objects $(LOCAL:S=.cpp) ;

# have to avoid name conflict with server main
Object client_main.o : main.cpp ;

# couldn't get shared to work in a nice way
Object person.o : ../shared/person.cpp ;
Object Server.o : ../shared/Server.cpp ;
Object Collisions.o : ../shared/Collisions.cpp ;

LOCATE_TARGET = ../dist ; #put executable in 'dist' directory
MainFromObjects client : $(NAMES:S=$(SUFOBJ)) ;
